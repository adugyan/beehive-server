#!/usr/bin/env python3
import pika
import ssl
import argparse
import os
import subprocess
import re

parser = argparse.ArgumentParser()
parser.add_argument('ca_dir')
parser.add_argument('node_dir')
args = parser.parse_args()

ssl_options = {
    'ca_certs': os.path.join(args.ca_dir, 'cacert.pem'),
    'certfile': os.path.join(args.node_dir, 'cert.pem'),
    'keyfile': os.path.join(args.node_dir, 'key.pem'),
    'cert_reqs': ssl.CERT_REQUIRED,
}

connection_parameters = pika.ConnectionParameters(
    host='localhost',
    port=23181,
    credentials=pika.credentials.ExternalCredentials(),
    ssl=True,
    ssl_options=ssl_options)

connection = pika.BlockingConnection(connection_parameters)
channel = connection.channel()


def handle_message(ch, method, properties, body):
    print('---')
    print(method)
    print(properties)
    print(body)
    ch.basic_ack(delivery_tag=method.delivery_tag)


output = subprocess.check_output(['openssl', 'x509', '-noout', '-subject', '-in', ssl_options['certfile']]).decode()
username = re.search('CN=(node[0-9A-Fa-f]*)', output).group(1)
queue = queue='to-{}'.format(username)

channel.queue_declare(queue=queue)
channel.basic_qos(prefetch_count=1)
channel.basic_consume(handle_message, queue)
channel.start_consuming()
