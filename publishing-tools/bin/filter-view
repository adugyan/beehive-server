#!/usr/bin/env python3
import argparse
from datetime import datetime
import json
import sys


class Interval:

    def __init__(self, start, end):
        self.start = start
        self.end = end

    def __contains__(self, dt):
        return ((self.start is None or self.start < dt) and
                (self.end is None or dt <= self.end))

    def __repr__(self):
        return repr((self.start, self.end))


datetime_format = '%Y/%m/%d %H:%M:%S'


def make_interval_list(events):
    intervals = []

    for event in events:
        if event['event'] in ['commissioned']:
            start = event['timestamp']
            intervals.append(Interval(start, None))

        if event['event'] in ['decommissioned', 'retired']:
            end = event['timestamp']
            if len(intervals) > 0 and intervals[-1].end is None:
                intervals[-1].end = end

    return intervals


def read_metadata(filename):
    with open(filename) as f:
        nodes = json.load(f)

    for node in nodes:
        if 'events' in node:
            for event in node['events']:
                event['timestamp'] = datetime.strptime(event['timestamp'],
                                                       datetime_format)

    for node in nodes:
        # support for new commissioned tracking
        if 'events' in node:
            node['commissioned'] = make_interval_list(node['events'])
        # maintain support for old timestamp - will remove
        elif 'commissioned_at' in node:
            start = datetime.strptime(node['commissioned_at'], datetime_format)
            node['commissioned'] = [Interval(start, None)]

    return nodes


if __name__ == '__main__':
    parser = argparse.ArgumentParser()
    parser.add_argument('meta', help='metadata config file for view')
    args = parser.parse_args()

    nodes = read_metadata(args.meta)
    nodes_by_id = {node['node_id']: node for node in nodes}

    def isviewable(line):
        fields = line.split(';')
        node_id = fields[0]
        timestamp = datetime.strptime(fields[1], datetime_format)

        if node_id not in nodes_by_id:
            return False

        node = nodes_by_id[node_id]

        return any(timestamp in interval for interval in node['commissioned'])

    for line in filter(isviewable, sys.stdin.readlines()):
        sys.stdout.write(line)
