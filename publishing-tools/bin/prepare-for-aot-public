#!/usr/bin/env python3
import sys
import os
import subprocess
import argparse
import publishing

# resolve repo paths
program = os.path.abspath(sys.argv[0])
pubdir = os.path.dirname(os.path.dirname(program))

parser = argparse.ArgumentParser()
parser.add_argument('src')
parser.add_argument('dst')
args = parser.parse_args()


def needs_refresh(src, dst):
    try:
        src_mtime = os.stat(src).st_mtime
    except FileNotFoundError:
        return False

    try:
        dst_mtime = os.stat(dst).st_mtime
    except FileNotFoundError:
        return True

    return dst_mtime < src_mtime


def build_file_index():
    index = [filename for filename in os.listdir(args.dst) if filename.endswith('.csv')]

    with open(os.path.join(args.dst, 'index'), 'w') as file:
        for filename in sorted(index):
            print(filename, file=file)


nodes = publishing.load_project_metadata(os.path.join(pubdir, 'examples/plenario'))
nodes_by_id = {node['node_id']: node for node in nodes}

candidates = sorted(publishing.published_dates(nodes),
                    key=lambda item: item[1], reverse=True)

mapping = []

for node, date in candidates:
    src = os.path.join(args.src, '{}/{}.csv.gz'.format(node['node_id'], date.strftime('%Y-%m-%d')))
    dst = os.path.join(args.dst, 'node.{}.{}.csv'.format(node['node_id'], date.strftime('%Y.%m.%d')))
    mapping.append((src, dst))


for src, dst in filter(lambda pair: needs_refresh(*pair), mapping):
    try:
        subprocess.check_output('''
        gzip -dc {src} |
        {pubdir}/bin/filter-sensors {pubdir}/examples/climate.csv |
        {pubdir}/bin/filter-view {pubdir}/examples/plenario > {dst}.tmp
        '''.format(src=src, dst=dst, pubdir=pubdir), shell=True)

        os.rename(dst + '.tmp', dst)

        print('ok', src)
    except Exception as exc:
        print('err', src, exc)
        continue

build_file_index()
