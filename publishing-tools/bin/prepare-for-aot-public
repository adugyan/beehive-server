#!/usr/bin/env python3
import os
import re
import subprocess
import argparse
import publishing


parser = argparse.ArgumentParser()
parser.add_argument('src')
parser.add_argument('dst')
args = parser.parse_args()


root = '/Users/Sean/beehive-server'
# root = '/homes/waggle/beehive-server'


def needs_refresh(src, dst):
    try:
        src_mtime = os.stat(src).st_mtime
    except FileNotFoundError:
        return False

    try:
        dst_mtime = os.stat(dst).st_mtime
    except FileNotFoundError:
        return True

    return dst_mtime < src_mtime


def build_file_index():
    index = [filename for filename in os.listdir(args.dst) if filename.endswith('.csv')]

    with open(os.path.join(args.dst, 'index'), 'w') as file:
        for filename in sorted(index):
            print(filename, file=file)


nodes = publishing.load_nodes_metadata(os.path.join(root, 'publishing-tools/examples/plenario/nodes.csv'))

nodes_by_id = {node['node_id']: node for node in nodes}

output = subprocess.check_output([
    os.path.join(root, 'publishing-tools/bin/published-dates'),
    os.path.join(root, 'publishing-tools/examples/plenario'),
]).decode()

candidates = []

for line in output.splitlines():
    node_id, date = line.split()
    node = nodes_by_id[node_id]
    if re.match('\d+-\d+-\d+', date):
        candidates.append((node, date))

# prioritize recent data
candidates.sort(key=lambda item: item[1], reverse=True)

mapping = []

for (node, date) in candidates:
    src = os.path.join(args.src, '{}/{}.csv.gz'.format(node['node_id'], date))
    dst = os.path.join(args.dst, 'node.{}.{}.csv'.format(node['node_id'], date.replace('-', '.')))
    mapping.append((src, dst))

for src, dst in filter(lambda pair: needs_refresh(*pair), mapping):
    try:
        subprocess.check_output('''
        gzip -dc {src} |
        {root}/publishing-tools/bin/filter-sensors {root}/publishing-tools/examples/climate.csv |
        {root}/publishing-tools/bin/filter-view {root}/publishing-tools/examples/plenario > {dst}.tmp
        '''.format(src=src, dst=dst, root=root), shell=True)

        os.rename(dst + '.tmp', dst)

        print('ok', src)
    except Exception as exc:
        print('err', src, exc)
        continue

build_file_index()
