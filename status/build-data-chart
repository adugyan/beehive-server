#!/usr/bin/env python3
# ANL:waggle-license
#  This file is part of the Waggle Platform.  Please see the file
#  LICENSE.waggle.txt for the legal details of the copyright and software
#  license.  For more details on the Waggle project, visit:
#           http://www.wa8.gl
# ANL:waggle-license
import argparse
from cassandra.cluster import Cluster
import datetime
import logging
import re


def symbol(x):
    return str(int(x))


parser = argparse.ArgumentParser()
parser.add_argument('-n', default=90, type=int)
parser.add_argument('--order', default='last', choices=['last', 'first', 'uptime'])
parser.add_argument('-r', '--reverse', action='store_true')
args = parser.parse_args()

cluster = Cluster()
session = cluster.connect('waggle')

keys = set()
nodes = set()

rows = session.execute('SELECT DISTINCT node_id, date FROM sensor_data_raw')

for row in rows:
    if not re.match(r'[0-9a-fA-F]+', row.node_id) or not row.date:
        logging.warning('Invalid key %s found.', (row.node_id, row.date))
        continue

    node_id = row.node_id[-12:].lower()
    date = row.date

    nodes.add(node_id)
    keys.add((node_id, date))


now = datetime.datetime.utcnow()
ns = list(range(args.n))
dates = [now - datetime.timedelta(days=n) for n in ns]
dates.sort()

results = []

for node in nodes:
    up = [(node, date.strftime('%Y-%m-%d')) in keys for date in dates]
    results.append((node, up))


if args.order == 'first':
    def sortkey(r):
        return r[1], r[0]
elif args.order == 'last':
    def sortkey(r):
        return r[1][::-1], r[0]
elif args.order == 'uptime':
    def sortkey(r):
        return sum(int(x) for x in r[1]), r[0]
else:
    raise ValueError('Invalid order.')


results.sort(key=sortkey, reverse=args.reverse)

for r in results:
    print(r[0], ''.join(map(symbol, r[1])))
