#!/usr/bin/env python3
import fileinput
from cassandra.cluster import Cluster
import os
import binascii
import re
from waggle.coresense.utils import decode_frame
from alphasense.opc import decode18
import logging

logging.basicConfig(level=logging.ERROR)
logger = logging.getLogger('export')
logger.setLevel(logging.INFO)


def normalize_key(k):
    return re.sub('[-_ ]+', '_', k).lower()


def normalize_value(v):
    if isinstance(v, dict):
        return {normalize_key(k2): normalize_value(v2) for k2, v2 in v.items()}
    if isinstance(v, list):
        return [normalize_value(v2) for v2 in v]
    if isinstance(v, float):
        return round(v, 3)
    return v


cluster = Cluster()
session = cluster.connect('waggle')

query = 'SELECT timestamp, plugin_name, plugin_version, parameter, data FROM sensor_data_raw WHERE node_id=%s AND date=%s'

lines = list(fileinput.input())

for i, line in enumerate(lines):
    try:
        fields = line.split()
        node_id = fields[0]
        date = fields[2]
        partition_key = (fields[1], fields[2])

        prefix = 'datasets/2/{}'.format(node_id)
        os.makedirs(prefix, exist_ok=True)
        filename = '{}/{}.csv'.format(prefix, date)

        rows = session.execute(query, partition_key)

        logger.info('{} [{:.0%}]'.format(filename, i / len(lines)))

        with open(filename, 'w') as outfile:
            for row in rows:
                # need to fix this in the raw database anyway...
                # once our path is clear, we should drop corner cases like
                # this. we should also redo the table to just store bytes
                # data which will prevent this kind of thing in the future
                if row.data.startswith("b'"):
                    source = binascii.unhexlify(row.data[2:-1])
                else:
                    source = binascii.unhexlify(row.data)

                plugin = (row.plugin_name, row.plugin_version)

                try:
                    if plugin == ('coresense', '3'):
                        results = decode_frame(source)
                    elif plugin == ('alphasense', '1'):
                        results = decode18(source)
                    else:
                        results = {}
                except KeyboardInterrupt:
                    break
                except Exception as exc:
                    logger.debug('{} - {} - {}'.format(exc, plugin, source))
                    continue

                for sensor, values in results.items():
                    if isinstance(values, dict):
                        enum = values.items()
                    elif isinstance(values, list) or isinstance(values, tuple):
                        enum = enumerate(values)
                    else:
                        # non-dict or list child is not currently supported
                        # could do an expansion out to the leaves with prefix
                        # key?
                        continue

                    for name, value in enum:
                        columns = [
                            node_id,
                            str(int(row.timestamp.timestamp() * 1000)),
                            ':'.join([row.plugin_name, row.plugin_version]),
                            row.parameter,
                            sensor,
                            str(name),
                            str(value),
                        ]

                        print(';'.join(columns), file=outfile)

    except KeyboardInterrupt:
        break
    except Exception as exc:
        logger.error('{} - {} - {}'.format(exc, plugin, source))
