#!/usr/bin/env python3
import fileinput
from cassandra.cluster import Cluster
import os
import pipeline
import logging
import csv
import binascii
import time
from collections import Counter


def stringify(x):
    if x is None:
        return ''
    if isinstance(x, tuple) or isinstance(x, list):
        return ','.join(map(stringify, x))
    if isinstance(x, bytes) or isinstance(x, bytearray):
        return binascii.hexlify(x).decode()
    if isinstance(x, float):
        return str(round(x, 4))
    return str(x)


logger = logging.getLogger('export')
logger.setLevel(logging.INFO)

logging.basicConfig(level=logging.ERROR)

cluster = Cluster()
session = cluster.connect('waggle')
session.default_fetch_size = 50000

query = 'SELECT timestamp, plugin_name, plugin_version, parameter, data FROM sensor_data_raw WHERE node_id=%s AND date=%s'

lines = list(fileinput.input())

start_time = time.time()

for i, line in enumerate(lines):
    try:
        fields = line.split()

        node_id = fields[0][-12:].lower()
        date = fields[2]
        partition_key = (fields[1], fields[2])

        fetch_start = time.time()
        rows = list(session.execute(query, partition_key))
        fetch_elapsed = time.time() - fetch_start

        prefix = 'datasets/2/{}'.format(node_id)
        os.makedirs(prefix, exist_ok=True)
        filename = '{}/{}.csv'.format(prefix, date)

        logger.info('{} [{:.0%}]'.format(filename, i / len(lines)))

        dataset_start_time = time.time()

        with open(filename, 'w') as outfile:
            writer = csv.writer(outfile, delimiter=';')

            row_plugins = []

            for row in rows:
                row_plugins.append(':'.join([row.plugin_name, row.plugin_version]))

                try:
                    results = pipeline.decode(row)
                except KeyboardInterrupt:
                    break
                except Exception as exc:
                    logger.exception('failed to decode {} {} {}'.format(node_id, date, row))
                    continue

                for sensor, sensor_values in results.items():
                    for key, value in sensor_values.items():
                        raw_value = value.get('raw', None)
                        raw_units = value.get('raw_units', None)
                        hrf_value = value.get('hrf', None)
                        hrf_units = value.get('hrf_units', None)

                        writer.writerow([
                            node_id,
                            row.timestamp.strftime('%Y/%m/%d %H:%M:%S'),
                            ':'.join([row.plugin_name, row.plugin_version]),
                            '7a45cdf',
                            sensor,
                            key,
                            stringify(raw_value),
                            raw_units,
                            stringify(hrf_value),
                            hrf_units,
                        ])

        elapsed_time = time.time() - start_time
        dataset_elapsed_time = time.time() - dataset_start_time
        count = i + 1
        mean_time = elapsed_time / count
        expected_time_left = mean_time * (len(lines) - count)

        logger.info('Total time is {:0.2f} seconds.'.format(elapsed_time))
        logger.info('Fetch time is {:0.2f} seconds.'.format(fetch_elapsed))
        logger.info('Decode time is {:0.2f} seconds.'.format(dataset_elapsed_time))
        logger.info('Mean decode time is {:0.2f} seconds.'.format(mean_time))
        logger.info('Excepted time left is {:0.2f} seconds.'.format(expected_time_left))
        logger.info('Plugin stats: {}'.format(Counter(row_plugins)))

    except KeyboardInterrupt:
        break
    except Exception as exc:
        logger.exception('Failed to decode row: {}'.format(row))
