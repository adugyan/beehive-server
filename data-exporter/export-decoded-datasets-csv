#!/usr/bin/env python3
import fileinput
from cassandra.cluster import Cluster
import os
import pipeline
import logging
import csv
import binascii
import time
import sys

vsns = {
    '001e06200335': 'THS1',
    '001e06107cc5': 'W00D',
    '001e06107e4c': 'W002',
    '001e06107d7f': 'W007',
    '001e061089fa': '011',
    '001e06107ff0': '012',
    '001e061089c0': '00B',
    '001e06107d97': 'W006',
    '001e06108081': '00C',
    '001e0610893c': '003',
    '001e06107e5d': '014',
    '001e06200367': 'W008',
    '001e0610889b': 'IUH0',
    '001e061088c8': 'W00X',
    '001e061089e5': 'W009',
    '001e06200325': 'W00B',
    '001e06200314': '00E',
    '001e061080a7': 'W004',
    '001e06108a8a': 'W037',
    '001e0610ba72': '022',
    '001e0610bbe9': '01A',
    '001e061088a6': 'W00C',
    '001e0610b9fd': '00F',
    '001e0610ba37': '02B',
    '001e0610b9eb': '017',
    '001e0610b9e1': '021',
    '001e0610ba60': '016',
    '001e0610b9e7': '028',
    '001e0610b9f2': '026',
    '001e0610b9f8': '029',
    '001e06107c9e': 'BRT03',
    '001e0620051e': 'W00A',
    '001e0610ba64': 'RET',
    '001e0610bbf5': '024',
    '001e0610bbed': '013',
    '001e0610ba46': '004',
    '001e0610ba89': '008',
    '001e0610ba93': '015',
    '001e0610ba13': '01C',
    '001e0610bc10': '01F',
    '001e0610ba51': '023',
    '001e0610ba8b': '018',
    '001e0610ba18': '01D',
    '001e0610ba42': '02E',
    '001e0610ba81': '040',
    '001e0610ba5c': '005',
    '001e0610ba16': '010',
    '001e0610bbf9': '020',
    '001e0610ba3f': '019',
    '001e0610ba8f': '00D',
    '001e0610ba3b': '006',
    '001e0610bbff': '025',
    '001e0610bbe5': '02C',
    '001e0610ba67': '007',
    '001e0610b9e9': '080',
    '001e0610b9e5': '02F',
    '001e0610b9f6': '031',
    '001e0610c2e9': 'DLW09',
    '001e0610bc12': '085',
    '020000000000': 'VN0',
    '020000000001': 'LNK5',
    '020000000002': 'LNK2',
    '020000000003': 'LNK6',
    '020000000004': 'LNK7',
    '020000000005': 'LNK8',
    '020000000006': 'LNK9',
    '020000000007': 'LNK10',
    '020000000008': 'LNK11',
    '020000000009': 'LNK1',
    '02000000000a': 'LNK12',
    '02000000000b': 'LNK13',
    '02000000000c': 'LNK14',
    '02000000000d': 'LNK4',
    '02000000000e': 'LNK3',
    '02000000000f': 'LNK15',
    '001e06200162': 'W000',
    '001e06107d70': 'W03B',
    '001e0610ba57': '041',
    '001e0610ba01': '01E',
    '001e0610bc03': '01B',
    '001e0610ba15': '02A',
    '001e0610bc09': '027',
    '001e0610e8a7': 'DET5',
    '001e0610f668': '038',
    '001e0610ee38': 'DET13',
    '001e0610ea32': 'SPS2',
    '001e0610eb9d': '035',
    '001e0610ba8d': 'NIUU01',
    '001e0610fb4c': '04D',
    '001e0610ef29': '037',
    '001e0610ef7b': 'DET12',
    '001e0610ee99': 'DET14',
    '001e0610e31b': 'DET10',
    '001e0610ef27': '04C',
    '001e0610ef66': '04A',
    '001e0610ee8d': '04B',
    '001e0610c5fa': 'DLW01',
    '001e0610c2dd': 'DLW20',
    '001e0610ef01': 'DET16',
    '001e0610c2ed': 'DLW19',
    '001e0610c2e1': 'DLW18',
    '001e0610c2d7': 'DLW17',
    '001e0610c6f4': 'DLW16',
    '001e0610c2db': 'DLW15',
    '001e0610c06b': 'DLW14',
    '001e0610c429': 'DLW13',
    '001e0610c2df': 'DLW12',
    '001e0610c42e': 'DLW11',
    '001e0610c2e3': 'DLW10',
    '001e0610c2eb': 'DLW08',
    '001e0610c042': 'DLW07',
    '001e0610c2e5': 'DLW06',
    '001e0610c219': 'DLW05',
    '001e0610c040': 'DLW04',
    '001e0610c0ea': 'DLW03',
    '001e0610c069': 'DLW02',
    '001e0610f730': '039',
    '001e0610ee55': 'DET2',
    '001e0610fb45': 'DET1',
    '001e061131d3': 'DET6',
    '001e0610f72c': '036',
    '001e0610ee94': 'DET9',
    '001e061131d6': 'SPS1',
    '001e0610e53e': 'DET4',
    '001e0610eba3': 'DET3',
    '001e0610ec0c': 'DET7',
    '001e0610f71f': 'DET8',
    '001e0610fb49': 'DET11',
    '001e0610ee96': 'DET15',
    '001e0610eef4': '034',
    '001e0610eef6': '047',
    '001e0610eef0': '03B',
    '001e0610e540': '05A',
    '001e0610bc07': '03C',
    '001e0610ef68': '04F',
    '001e0610ee61': '03F',
    '001e0610ee41': '032',
    '001e0610ee33': '02D',
    '001e0610e809': '050',
    '001e0610ee6f': '04E',
    '001e0610eee9': '03A',
    '001e061130fe': '05F',
    '001e061135c8': '042',
    '001e0610ea5a': '03E',
    '001e0610ef26': '03D',
    '001e0610ef73': '057',
    '001e0610f725': '059',
    '001e0610f063': '055',
    '001e0610ee5f': '091B',
    '001e0610f8f6': '058',
    '001e0610e8cb': '054',
    '001e0610ee36': '051',
    '001e0610f8fd': '044',
    '001e061135cb': '052',
    '001e0610f068': '043',
    '001e0610f8f7': '049',
    '001e0610ee82': '048',
    '001e0610e532': '053',
    '001e0610ee5d': '056',
    '001e0610f029': '045',
    '001e0610ef75': '009',
    '001e0610fc2d': '05E',
    '001e0610ef03': '046',
    '001e0610f02f': '00A',
    '001e0610e545': '065',
    '001e0610ee43': '08B',
    '001e0610e80f': '033',
    '001e0610e547': '060',
    '001e0610e34e': '061',
    '001e0610ef1d': '05C',
    '001e0610f6dd': '05D',
    '001e0610e538': '087',
    '001e0610f05c': '08C',
    '001e0611320d': '05B',
    '001e0610f732': '08D',
    '001e0610f8f4': '030',
    '001e0610f513': '090A',
    '001e061130f4': '089',
    '001e0610e537': '08F',
    '001e06113100': '08E',
    '001e0610e835': '086',
    '001e0610eef2': '088',
    '001e0610f703': '07F',
    '001e0610e539': '07E',
    '001e061130f7': '084',
    '001e06113a07': '064',
    '001e06113d83': '06A',
    '001e0610c044': 'DLW26',
    '001e0610c776': 'DLW21',
    '001e0610c046': 'DLW25',
    '001e0610c0ef': 'DLW22',
    '001e0610c762': 'DLW23',
    '001e0610c2a9': 'DLW24',
    '001e06113d6d': '066',
    '001e0610c2e7': 'DLW27',
    '001e0610c03e': 'DLW28',
    '001e06115388': '063',
    '001e0610c5ed': 'DLW29',
    '001e0610c216': 'DLW30',
    '001e06115363': '069',
    '001e0611325e': '06F',
    '001e06115365': '06E',
    '001e06113ad8': '062',
    '001e06113d20': '094',
    '001e06115382': '09B',
    '001e0610f6db': '06D',
    '001e06113107': '072',
    '001e06112e77': '06B',
    '001e0610e7fc': '06C',
    '001e0611441e': '067',
    '001e061144be': '890',
    '001e0611536a': '08A',
    '001e06114503': '095',
    '001e0611462f': '081',
    '001e06115369': '082',
    '001e0611537d': '071',
    '001e06113d78': '083',
    '001e06113cff': '070',
    '001e06113cf1': '09C',
    '001e06109f62': '076',
    '001e061144c0': '097',
    '001e061146d6': '091A',
    '001e06113dbc': '096',
    '001e06113d22': '092',
    '001e06113ae8': '093',
    '001e0610941b': '078',
    '001e06109416': '090B',
    '001e061144cd': '07B',
    '001e061144d6': '07D',
    '001e061146bc': '079',
    '001e06113acb': '09D',
    '001e0610890f': '074',
    '001e06113ace': '077',
    '001e061146cb': '07C',
    '001e06114fd4': '073',
    '001e06113ad6': '075',
    '001e06109401': '09A',
    '001e061146d4': '099',
    '001e06114500': '0A1',
    '001e06113f54': '0A0',
    '001e0611463b': '0A9',
    '001e06113d32': '0A2',
    '001e06113ba6': '0A5',
    '001e0611536c': '0AA',
    '001e06115379': '0A6',
    '001e061146ba': '0A3',
    '001e06113a48': '0A4',
    '001e061146b8': '0A8',
    '001e06114640': '09E',
    '001e06114fcf': '098',
    '001e06114fd9': '0AC',
    '001e06114fd6': '0A7',
    '001e0610ee4c': 'ADM01',
    '001e0611538f': '0AB',
    '001e061088bf': 'W001',
    '001e0610ee63': 'ADM06',
    '001e0610eefa': 'ADM02',
    '001e0610ebee': 'ADM03',
    '001e0610ef30': 'ADM04',
    '001e0610ef0e': 'ADM05',
}

def stringify(x):
    if x is None:
        return 'NA'
    if isinstance(x, tuple) or isinstance(x, list):
        return ','.join(map(stringify, x))
    if isinstance(x, bytes) or isinstance(x, bytearray):
        return binascii.hexlify(x).decode()
    if isinstance(x, float):
        return x
        # return str(round(x, 4))
    if isinstance(x, bool):
        return int(x)
    return str(x)


old_plugins = ['coresense:3', 'alphasense:1', 'gps:1']


def convertrows(rows, writer):
    for row in rows:
        plugin = row.plugin_name + ':' + row.plugin_version

        try:
            results = pipeline.decode(row)
        except KeyboardInterrupt:
            break
        except Exception as exc:
            logger.exception('failed to decode {} {} {}'.format(node_id, date, row))
            continue

        for (subsystem, sensor), sensor_values in results.items():
            for key, value in sensor_values.items():
                if plugin in old_plugins:
                    raw_value = ''
                    hrf_value = value
                else:
                    raw_value = value.get('raw', None)
                    hrf_value = value.get('hrf', None)

                writer.writerow([
                    row.timestamp.strftime('%Y/%m/%d %H:%M:%S'),
                    vsn,
                    node_id,
                    subsystem,
                    sensor,
                    key,
                    stringify(raw_value),
                    stringify(hrf_value),
                ])


logger = logging.getLogger('export')
logger.setLevel(logging.INFO)
# logging.basicConfig(level=logging.INFO)

cluster = Cluster(connect_timeout=30, control_connection_timeout=30)
session = cluster.connect('waggle')
session.default_fetch_size = 50000

query = 'SELECT timestamp, plugin_name, plugin_version, parameter, data FROM sensor_data_raw WHERE node_id=%s AND date=%s'

lines = list(fileinput.input())

# opened = set()

writer = csv.writer(sys.stdout)

writer.writerow([
    'timestamp',
    'node',
    'node_id',
    'subsystem',
    'sensor',
    'parameter',
    'value_raw',
    'value_hrf',
])

for i, line in enumerate(lines):
    try:
        fields = line.split()

        node_id = fields[0][-12:].lower()
        vsn = vsns.get(node_id, '')
        date = fields[2]
        partition_key = (fields[1], fields[2])

        prefix = 'datasets/2/{}'.format(node_id)
        os.makedirs(prefix, exist_ok=True)
        filename = '{}/{}.csv'.format(prefix, date)

        rows = session.execute(query, partition_key)

        convertrows(rows, writer)

        # if filename in opened:
        #     mode = 'a'
        # else:
        #     mode = 'w'
        #
        # opened.add(filename)
        #
        # with open(filename, mode) as outfile:
        #     writer = csv.writer(outfile, delimiter=';')

    except KeyboardInterrupt:
        break
    except Exception as exc:
        logger.exception('Failed to decode row: {}'.format(row))
